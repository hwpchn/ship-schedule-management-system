version: '3.8'

services:
  # 数据库服务
  db:
    image: mysql:8.0
    container_name: ship_schedule_db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ship_network
    command: --default-authentication-plugin=mysql_native_password

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: ship_schedule_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - ship_network

  # 后端Web应用
  web:
    build: 
      context: ./ship_schedule_projct
      dockerfile: Dockerfile
    container_name: ship_schedule_web
    restart: unless-stopped
    environment:
      - DEBUG=False
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=${REDIS_URL}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./ship_schedule_projct/media:/app/media
      - ./ship_schedule_projct/logs:/app/logs
      - ./ship_schedule_projct/static:/app/static
    depends_on:
      - db
      - redis
    networks:
      - ship_network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 4 ship_schedule.wsgi:application"

  # 前端应用
  frontend:
    build:
      context: ./ship-schedule-management-ui
      dockerfile: Dockerfile
    container_name: ship_schedule_frontend
    restart: unless-stopped
    depends_on:
      - web
    networks:
      - ship_network

  # Nginx反向代理 (带SSL支持)
  nginx:
    image: nginx:alpine
    container_name: ship_schedule_nginx_prod
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/letsencrypt  # Let's Encrypt证书目录
      - ./ssl/temp:/etc/nginx/ssl  # 临时证书目录
      - ./ship_schedule_projct/static:/var/www/static
      - ./ship_schedule_projct/media:/var/www/media
      - ./ship-schedule-management-ui/dist:/var/www/html
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    networks:
      - ship_network

  # Certbot for Let's Encrypt SSL certificates
  certbot:
    image: certbot/certbot
    container_name: ship_schedule_certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./ssl-challenge:/var/www/certbot
    command: echo "Certbot container ready for SSL certificate generation"

volumes:
  mysql_data:
  redis_data:

networks:
  ship_network:
    driver: bridge